Q. Please show a possible implementation of Rust's type std::borrow::Cow in C++.

I'll show you how to implement a simplified version of Rust's std::borrow::Cow (Copy-on-Write) in C++. Rust's Cow is an enum that can hold either a borrowed reference (&'a T) or an owned value (T), typically used to avoid unnecessary cloning. In C++, we can approximate this using a combination of templates, variants, and smart pointers.

Here's a possible implementation:

    cow.cpp

Key Features and Explanation:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Core Design:

    Uses std::variant to store either a const T* (borrowed) or a std::unique_ptr<T> (owned).
    std::unique_ptr ensures proper ownership semantics and automatic cleanup, similar to Rust's owned variant.

2. Constructors:

    Cow(const T*): Creates a borrowed instance.
    Cow(T&&): Creates an owned instance by moving a value into a unique_ptr.
    Copy constructor handles deep copying of owned values and shallow copying of borrowed pointers.

3. Accessors:

    operator* and operator-> provide read-only access to the underlying value, regardless of whether it's borrowed or owned.
    No mutable access is provided here to match the common use case of Cow (you'd typically call to_owned() first if mutation is needed).

4. State Checking:

    is_borrowed() and is_owned() let you inspect the current state.

5. Copy-on-Write:

    to_owned() converts a borrowed value to an owned one by cloning the data, mimicking Rust's Cow::to_owned().

6. Differences from Rust:

    Rust's Cow uses lifetime parameters to ensure borrowed references remain valid. C++ can't enforce this at compile time, so we rely on runtime checks (e.g., null pointer check) and programmer discipline.
    This implementation uses unique_ptr instead of a raw owned T to manage memory, which adds some overhead but ensures safety.
    Rust's Cow is typically used with Borrow and ToOwned traits; here, we assume T is copyable for simplicity.

Output of Example:
~~~~~~~~~~~~~~~~~~
    Borrowed: Hello, Is borrowed: 1
    Owned: World, Is owned: 1
    Borrowed copy: Hello
    After to_owned: Hello, Is owned: 1

Limitations:
~~~~~~~~~~~~
    No compile-time lifetime checking (a fundamental difference between Rust and C++).
    Only provides read-only access (could be extended with mutable access if needed).
    Assumes T is copy-constructible for to_owned().

This is a simplified version but captures the essence of Cow.
