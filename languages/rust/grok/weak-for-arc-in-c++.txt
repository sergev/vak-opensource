Let’s implement a version of Rust’s Weak for Arc (Atomic Reference Counting) in C++. In Rust, Arc is similar to Rc but is thread-safe, using atomic operations for reference counting. This allows Arc to be shared across threads, and its companion Weak provides a non-owning reference that can be upgraded to an Arc if the data still exists. The key difference from Rc is that Arc uses atomic counters (std::sync::atomic::AtomicUsize in Rust) instead of plain integers, ensuring safe concurrent access.

In C++, we’ll use std::atomic<size_t> for the counters to mimic this thread-safety. The structure will be similar to our Rc and Weak implementation, but we’ll adjust the reference counting to be atomic. Here’s how it could look:

    weak-arc.cpp

Key Differences from Rc/Weak
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Atomic Counters:
     * ArcControlBlock uses std::atomic<size_t> for strong_count and weak_count.
     * Operations like fetch_add, fetch_sub, and compare_exchange_weak ensure thread-safe updates.
2. Memory Ordering:
     * std::memory_order_relaxed is used for non-critical reads/writes where ordering isn’t needed.
     * std::memory_order_acq_rel (acquire-release) is used for decrements and upgrades to ensure proper synchronization:
         - Acquire ensures we see all prior writes when reading the count.
         - Release ensures our writes are visible before the count drops.
     * upgrade() uses compare_exchange_weak to atomically increment the strong count only if it’s still non-zero, preventing race conditions.
3. Thread-Safety:
     * The reference counting is safe across threads, but accessing *data isn’t inherently thread-safe. In a real application, you’d need to synchronize data access (e.g., with a mutex) if T is modified concurrently.

Compilation
~~~~~~~~~~~
Compile with threading support:

    g++ -std=c++17 -pthread -o arc_weak arc_weak.cpp

Expected Output
~~~~~~~~~~~~~~~
    Strong count: 1, Weak count: 0
    Strong count: 1, Weak count: 1
    Upgraded value: 42
    Strong count: 2, Weak count: 1
    Thread sees value: 42
    Thread strong count: 2, Weak count: 1
    Strong count after copy: 2
    Still alive: 42

Notes
~~~~~
 * Threading Demo: The example spawns a thread to show that Arc can be safely shared. The output order may vary due to thread scheduling.
 * Deallocation: To see “Data has been deallocated,” you’d need to drop all Arc instances before the final upgrade(). Adjust main() like this if desired:

    auto weak = [&]() {
        auto arc = Arc<int>::new_arc(42);
        return arc.create_weak();
    }();
    if (auto upgraded = weak.upgrade()) {
        std::cout << "Still alive: " << **upgraded << "\n";
    } else {
        std::cout << "Data has been deallocated\n";
    }

 * Comparison to std::shared_ptr: C++’s std::shared_ptr with std::weak_ptr is similar but uses a control block with atomic counters internally. Our version makes this explicit for clarity.

This implementation captures the essence of Weak for Arc in a thread-safe way.
