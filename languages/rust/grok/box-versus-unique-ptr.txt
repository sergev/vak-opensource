Q. What is the difference between the above Box<T> and std::unique_ptr?

Thanks! I’m glad you liked the Box<T> implementation. Now,
let’s compare it to std::unique_ptr<T>—C++’s standard smart
pointer for unique ownership—since they’re conceptually similar
but differ in design and functionality. Both our custom Box<T>
and std::unique_ptr<T> manage heap-allocated memory with RAII,
ensuring automatic cleanup, but they diverge in flexibility,
features, and intent. Here’s a detailed breakdown.

Core Similarities
~~~~~~~~~~~~~~~~~
 * Unique Ownership: Both enforce single ownership of a heap-allocated object, preventing multiple pointers from claiming the same memory.
 * RAII: Both deallocate their resource automatically when they go out of scope via destructors.
 * Move Semantics: Both support moving ownership with move constructors and move assignment (C++11 onward).
 * No Copying: Both disable copying by default to enforce exclusivity.

Key Differences
~~~~~~~~~~~~~~~
1. Purpose and Flexibility
    Custom Box<T>:
     * Modeled after Rust’s Box<T>, designed as a simple, minimal heap allocator for a single T.
     * Focuses on mimicking Rust’s behavior: allocate, own, dereference, deallocate.
     * No extra features beyond basic ownership and access.

    std::unique_ptr<T>`:
     * A general-purpose smart pointer in the C++ Standard Library, designed for broader use cases.
     * Supports customization (e.g., deleters) and more complex scenarios (e.g., arrays, custom cleanup).
     * Part of a larger ecosystem with shared_ptr and weak_ptr.

2. Deleter Customization
    Custom Box<T>:
     * Hardcodes delete ptr for deallocation, assuming new allocation and T’s destructor.
     * No way to customize how memory is freed without modifying the class.
    std::unique_ptr<T, Deleter>`:
     * Takes an optional second template parameter, Deleter, defaulting to std::default_delete<T>.
     * Allows custom cleanup logic:

        struct CustomDeleter {
            void operator()(int* p) const { free(p); } // Example with malloc/free
        };
        std::unique_ptr<int, CustomDeleter> ptr(static_cast<int*>(malloc(sizeof(int))), CustomDeleter());

     * Useful for resources not allocated with new (e.g., C-style malloc, file handles).

3. Array Support
    Custom Box<T>:
     * Only handles a single T (like Rust’s Box<T>). No array support built-in.
     * To handle arrays, you’d need a separate Box<T[]> specialization, which we didn’t implement.
    std::unique_ptr<T>`:
     * Supports arrays with a specialization: std::unique_ptr<T[]>:

        std::unique_ptr<int[]> arr(new int[5]);
        arr[0] = 42; // Array indexing works

     * Uses delete[] instead of delete for arrays, ensuring proper cleanup.

4. Allocation
    Custom Box<T>:
     * Uses new T(args...) directly, combining allocation and construction.
     * No separation of allocation and initialization (like Rust’s Box::new).
    std::unique_ptr<T>`:
     * Can take a raw pointer from elsewhere (e.g., new T manually), allowing separation:

        T* raw = new T();
        std::unique_ptr<T> ptr(raw);

     * Also offers std::make_unique (C++14) for safer, exception-safe construction:

        auto ptr = std::make_unique<T>(args...);

5. Null State
    Custom Box<T>:
     * Always owns a valid T after construction; no null state by design (like Rust’s Box).
     * No default constructor—must initialize with a value.
    std::unique_ptr<T>`:
     * Can be null by default or explicitly:

        std::unique_ptr<T> ptr; // nullptr
        std::unique_ptr<T> ptr(nullptr);

     * Can be reset or released:

        ptr.reset(new T()); // Replace with new object
        T* raw = ptr.release(); // Take ownership, ptr becomes null

6. Dereferencing
    Custom Box<T>:
     * Provides operator* and operator-> for direct access, assuming ptr is never null.
     * No runtime null check (undefined behavior if misused, e.g., after move without care).
    std::unique_ptr<T>`:
     * Same operators (* and ->), but accessing a null unique_ptr is undefined behavior.
     * Adds get() to safely retrieve the raw pointer:

        T* raw = ptr.get(); // Non-owning access

7. Size and Overhead
    Custom Box<T>:
     * Size is just sizeof(T*) (e.g., 8 bytes on 64-bit), no extra overhead.
     * Minimal footprint, like Rust’s Box.
    std::unique_ptr<T>`:
     * Single-object version: Also sizeof(T*) with default deleter (no overhead).
     * With custom deleter: Size increases to store the deleter (e.g., sizeof(T*) + sizeof(Deleter)), though some implementations optimize if the deleter is stateless.

8. Standardization
    Custom Box<T>:
     * Custom implementation, not part of any standard—tailored to mimic Rust.
    std::unique_ptr<T>`:
     * Part of C++11 standard, widely used, tested, and optimized across compilers.

Code Comparison
~~~~~~~~~~~~~~~
Our Box<T>:

    template <typename T>
    class Box {
        T* ptr;
    public:
        explicit Box(T value) : ptr(new T(std::move(value))) {}
        ~Box() { delete ptr; }
        Box(Box&& other) noexcept : ptr(other.ptr) { other.ptr = nullptr; }
        T& operator*() { return *ptr; }
        T* operator->() { return ptr; }
        // No copy, minimal features
    };

std::unique_ptr<T>:

    #include <memory>
    auto ptr = std::unique_ptr<int>(new int(42));
    // Or with make_unique (C++14):
    auto ptr = std::make_unique<int>(42);

When to Use Which
~~~~~~~~~~~~~~~~~
Use Box<T> (Our Version):
 * If you’re porting Rust code to C++ and want exact semantics.
 * For a lightweight, no-frills unique ownership pointer.
 * In educational contexts to understand Rust’s internals.

Use std::unique_ptr<T>:
 * In production C++ code—standard, battle-tested, and interoperable.
 * When you need array support, custom deleters, or null states.
 * For exception safety with make_unique.

Rust Box<T> vs. unique_ptr
~~~~~~~~~~~~~~~~~~~~~~~~~~
Rust’s Box is closer to our Box<T> than unique_ptr because:
 * Rust doesn’t support null Boxes or custom deleters natively (those are separate abstractions like Option<Box<T>> or allocator APIs).
 * Rust’s Box is strictly single-object, no array variant (arrays use Vec<T>).

Wrap-Up
~~~~~~~
Our Box<T> is a stripped-down, Rust-inspired version of
std::unique_ptr<T>, lacking the latter’s flexibility (deleters,
arrays, nullability) but matching Rust’s simplicity and strict
ownership. unique_ptr is the C++ go-to unless you need Rust’s
exact behavior.
