Q. How many smart pointers like Box and Rc are present in Rust?

Rust’s standard library offers a rich set of smart pointers
beyond Box<T> and Rc<T>, each tailored to specific ownership
semantics, threading needs, and use cases. These smart pointers
leverage Rust’s ownership model and type system to provide
safe, ergonomic memory management. Let’s count and explore
them, focusing on the main ones in std (and one notable
exception from alloc). I’ll cover their purposes and how they
fit into Rust’s ecosystem.

Smart Pointers in Rust’s Standard Library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here are the primary smart pointers in Rust, all from std unless noted:

1. Box<T>
    Module: std::boxed
    Purpose: Unique ownership of a heap-allocated T. The simplest smart pointer, providing a single owner with automatic cleanup.
    Use Case: When you need heap allocation without sharing (e.g., recursive data structures, large objects).
    Threading: Safe to send across threads if T: Send.
    Notes: We re-implemented this in C++ earlier-minimal, no ref counting.
2. Rc<T>
    Module: std::rc
    Purpose: Reference-counted shared ownership for single-threaded use. Multiple Rc<T> instances share the same T, deallocating when the last reference drops.
    Use Case: Shared immutable data in a single thread (e.g., graph structures).
    Threading: Not thread-safe (!Send, !Sync).
    Notes: Paired with Weak<T> for non-owning refs; we just re-implemented it.
3. Arc<T>
    Module: std::sync
    Purpose: Atomic reference-counted shared ownership for multi-threaded use. Like Rc<T>, but with atomic operations for thread safety.
    Use Case: Sharing data across threads (e.g., thread pools, shared configs).
    Threading: Send and Sync if T: Send + Sync.
    Notes: More expensive than Rc<T> due to atomic increments/decrements.
4. Weak<T> (for Rc<T>)
    Module: std::rc
    Purpose: Non-owning weak reference to an Rc<T>-managed T. Doesn’t prevent deallocation; can be upgraded to Rc<T> if the T still exists.
    Use Case: Breaking reference cycles (e.g., parent-child pointers in trees).
    Threading: Single-threaded, tied to Rc<T>.
    Notes: Counted separately from strong refs; returns Option<Rc<T>> on upgrade.
5. Weak<T> (for Arc<T>)
    Module: std::sync
    Purpose: Weak reference to an Arc<T>-managed T. Thread-safe version of Rc’s Weak.
    Use Case: Same as Rc’s Weak, but in multi-threaded contexts.
    Threading: Send and Sync if T: Send + Sync.
    Notes: Atomic weak count, paired with Arc<T>.
6. Cell<T>
    Module: std::cell
    Purpose: Interior mutability for single-threaded use. Wraps a T, allowing mutation through shared references.
    Use Case: Mutating data inside an Rc<T> (e.g., Rc<Cell<i32>>).
    Threading: Not thread-safe (!Sync).
    Notes: Simple, no ref counting; works via runtime checks.
7. RefCell<T>
    Module: std::cell
    Purpose: Interior mutability with dynamic borrow checking. Allows mutable borrows at runtime, enforcing Rust’s rules.
    Use Case: Flexible mutation in shared contexts (e.g., Rc<RefCell<T>>).
    Threading: Single-threaded (!Sync).
    Notes: Panics on borrow violations; returns Ref or RefMut.
8. Mutex<T>
    Module: std::sync
    Purpose: Thread-safe mutual exclusion. Protects a T with a lock, allowing one thread at a time to access it.
    Use Case: Shared mutable data across threads (e.g., Arc<Mutex<T>>).
    Threading: Send and Sync if T: Send.
    Notes: Blocks or returns LockResult; heavier than RefCell.
9. RwLock<T>
    Module: std::sync
    Purpose: Thread-safe read-write lock. Allows multiple readers or one writer.
    Use Case: Mostly-read, occasionally-written shared data (e.g., Arc<RwLock<T>>).
    Threading: Send and Sync if T: Send + Sync.
    Notes: More efficient than Mutex for read-heavy workloads.
10. Cow<'a, T> (Clone-on-Write)
    Module: std::borrow
    Purpose: Smart pointer for borrowed or owned data. Holds a reference (&T) or owned value (T), cloning only when mutation is needed.
    Use Case: Efficient string or data handling (e.g., Cow<str>).
    Threading: Depends on T (not inherently thread-safe).
    Notes: Not heap-allocated by default; often used with Box or Rc.

Counting Them
~~~~~~~~~~~~~
That’s 10 distinct smart pointer types in Rust’s standard library:

 1. Box<T>
 2. Rc<T>
 3. Arc<T>
 4. Weak<T> (for Rc)
 5. Weak<T> (for Arc)
 6. Cell<T>
 7. RefCell<T>
 8. Mutex<T>
 9. RwLock<T>
10. Cow<'a, T>

Notes on Counting
~~~~~~~~~~~~~~~~~
 * Weak<T>: Listed twice because it’s distinct for Rc and Arc, with different threading semantics.
 * Not Included: Raw pointers (*const T, *mut T) aren’t smart-they lack ownership or cleanup.

Broader Context
~~~~~~~~~~~~~~~
 * Interior Mutability: Cell, RefCell, Mutex, and RwLock add mutability to otherwise immutable pointers (Rc, Arc).
 * Threading: Arc, Mutex, RwLock, and Arc’s Weak are for multi-threading; others are single-threaded.
 * Heap vs. Stack: Most (except Cow) imply heap allocation, though Cow can wrap heap types.

Comparison to C++
~~~~~~~~~~~~~~~~~
 * C++ Equivalents:
    Box<T> ≈ std::unique_ptr<T>
    Rc<T> ≈ std::shared_ptr<T> (non-atomic version)
    Arc<T> ≈ std::shared_ptr<T> (atomic)
    Weak<T> ≈ std::weak_ptr<T>
    Mutex<T> ≈ std::mutex + std::unique_lock
    RwLock<T> ≈ std::shared_mutex (C++17)
    No direct Cell/RefCell-custom runtime checks needed.
    Cow ≈ custom variant-like type or manual ownership toggling.
 * Rust Unique: Cell and RefCell leverage Rust’s borrow checker, offering safety not easily replicated in C++.
